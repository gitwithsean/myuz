# Generated by Django 4.2 on 2023-04-12 20:57

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Appearance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("distinguishing_features", models.TextField()),
                ("eyes", models.CharField(max_length=200)),
                ("hair", models.CharField(max_length=200)),
                ("face", models.CharField(max_length=200)),
                ("build", models.CharField(blank=True, max_length=200, null=True)),
                ("movement", models.CharField(blank=True, max_length=200, null=True)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": [
                    "character_version__for_character__name",
                    "character_version__version_num",
                ],
            },
        ),
        migrations.CreateModel(
            name="AppearanceModifiers",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("clothing", models.TextField(blank=True, null=True)),
                ("hair_head_options", models.TextField(blank=True, null=True)),
                ("perfume", models.CharField(blank=True, max_length=200, null=True)),
                ("makeup", models.CharField(blank=True, max_length=200, null=True)),
                ("shaving", models.CharField(blank=True, max_length=200, null=True)),
                ("hygiene", models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                "ordering": [
                    "character_version__for_character__name",
                    "character_version__version_num",
                ],
            },
        ),
        migrations.CreateModel(
            name="Belief",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="BGEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("event", models.CharField(max_length=200)),
                ("date_from", models.DateField(blank=True, null=True)),
                ("date_to", models.DateField(blank=True, null=True)),
                ("order_in_story_events", models.IntegerField(blank=True, null=True)),
                (
                    "order_in_narrative_telling",
                    models.IntegerField(blank=True, null=True),
                ),
            ],
            options={
                "ordering": ["date_from"],
            },
        ),
        migrations.CreateModel(
            name="BGResearch",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("bg_research", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["bg_research"],
            },
        ),
        migrations.CreateModel(
            name="Book",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Chapter",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("chapter_num", models.IntegerField()),
                ("chapter_title", models.CharField(blank=True, max_length=200)),
                ("chapter_goals", models.TextField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="book_characters",
                        to="noveller.book",
                    ),
                ),
            ],
            options={
                "ordering": ["chapter_num"],
            },
        ),
        migrations.CreateModel(
            name="ChapterPart",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("part_title", models.CharField(blank=True, max_length=200)),
                ("part_num", models.IntegerField()),
                ("part_goals", models.TextField(blank=True, null=True)),
                (
                    "chapter",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="noveller.chapter",
                    ),
                ),
            ],
            options={
                "ordering": ["chapter__chapter_num", "part_num"],
            },
        ),
        migrations.CreateModel(
            name="ChapterPartSummary",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=200)),
                ("chapter_summary", models.TextField(blank=True)),
                (
                    "for_chapter_part",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="noveller.chapterpart",
                    ),
                ),
            ],
            options={
                "ordering": [
                    "for_chapter_part__chapter__chapter_num",
                    "for_chapter_part__part_num",
                ],
            },
        ),
        migrations.CreateModel(
            name="Character",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("age_at_start", models.IntegerField(blank=True, null=True)),
                ("gender", models.CharField(blank=True, max_length=200, null=True)),
                ("sex", models.CharField(blank=True, max_length=200, null=True)),
                ("sexuality", models.CharField(blank=True, max_length=200, null=True)),
                ("origin", models.TextField(blank=True, null=True)),
                ("permanent_characteristics", models.TextField(blank=True, null=True)),
                ("character_arc", models.TextField(blank=True, null=True)),
                ("elaboration", models.TextField(blank=True, null=True)),
                ("book", models.ManyToManyField(to="noveller.book")),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CharacterRelationship",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("age_started", models.IntegerField()),
                ("relationship_descriptors", models.TextField()),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": [
                    "relationship_from__for_character__name",
                    "relationship_to__for_character__name",
                ],
            },
        ),
        migrations.CreateModel(
            name="CharacterTrait",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CharacterVersion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("version_num", models.IntegerField()),
                (
                    "version_name",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("age_at_start", models.IntegerField(blank=True, null=True)),
                ("age_at_end", models.IntegerField(blank=True, null=True)),
                (
                    "preferred_weapon",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("subter", models.CharField(blank=True, max_length=200, null=True)),
                ("elaboration", models.TextField(blank=True, null=True)),
                (
                    "appearance",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="noveller.appearance",
                    ),
                ),
                ("beliefs", models.ManyToManyField(blank=True, to="noveller.belief")),
            ],
            options={
                "ordering": ["for_character__name"],
            },
        ),
        migrations.CreateModel(
            name="DeeperBGResearchTopic",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("topic", models.CharField(max_length=200)),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["topic"],
            },
        ),
        migrations.CreateModel(
            name="Drive",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Faction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "members",
                    models.ManyToManyField(blank=True, to="noveller.characterversion"),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Fear",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("file_location", models.CharField(max_length=255)),
                ("file_content", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="LiteraryImagery",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LiteraryInspirationPerson",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("person", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["person"],
            },
        ),
        migrations.CreateModel(
            name="LiteraryInspirationSource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("source", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["source"],
            },
        ),
        migrations.CreateModel(
            name="LiteraryMood",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LiterarySymbolism",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LiteraryTone",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LiteraryTraits",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LitStyleGuide",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("style_guide", models.TextField(blank=True, null=True)),
                ("compressed_sg", models.TextField(blank=True, null=True)),
                ("writing_samples", models.TextField(blank=True, null=True)),
                (
                    "avoid",
                    models.ManyToManyField(
                        blank=True,
                        related_name="litstyleguide_avoid",
                        to="noveller.literarytraits",
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="noveller.character",
                    ),
                ),
                (
                    "character_version",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="noveller.characterversion",
                    ),
                ),
                (
                    "imagery",
                    models.ManyToManyField(blank=True, to="noveller.literaryimagery"),
                ),
                (
                    "inspirations",
                    models.ManyToManyField(
                        blank=True, to="noveller.literaryinspirationperson"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Pacing",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=200)),
                ("elaboration", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Perspective",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Plot",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="books_plots",
                        to="noveller.book",
                    ),
                ),
            ],
            options={
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="PlotEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("date_from", models.DateField(blank=True, null=True)),
                ("date_to", models.DateField(blank=True, null=True)),
                ("order_in_story_events", models.IntegerField(blank=True, null=True)),
                (
                    "order_in_narrative_telling",
                    models.IntegerField(blank=True, null=True),
                ),
                ("is_climax_of_plot", models.BooleanField(blank=True, null=True)),
                (
                    "foreshadowing",
                    models.ManyToManyField(
                        blank=True, related_name="SubPlotEvent", to="noveller.plotevent"
                    ),
                ),
                (
                    "subplot_of",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plots_events",
                        to="noveller.plot",
                    ),
                ),
            ],
            options={
                "ordering": ["description"],
            },
        ),
        migrations.CreateModel(
            name="Theme",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SubPlot",
            fields=[
                (
                    "plot_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="noveller.plot",
                    ),
                ),
            ],
            options={
                "ordering": ["sub_plot_of__title", "title"],
            },
            bases=("noveller.plot",),
        ),
        migrations.CreateModel(
            name="TargetAudience",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="books_audience",
                        to="noveller.book",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="StoryTeller",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="noveller.characterversion",
                    ),
                ),
                (
                    "style",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="noveller.litstyleguide",
                    ),
                ),
            ],
            options={
                "ordering": ["character__for_character__name"],
            },
        ),
        migrations.CreateModel(
            name="Setting",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("general_setting", models.TextField(blank=True)),
                (
                    "bg_events",
                    models.ManyToManyField(blank=True, to="noveller.bgevent"),
                ),
                (
                    "bg_research",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="noveller.bgresearch",
                    ),
                ),
                ("books", models.ManyToManyField(blank=True, to="noveller.book")),
                ("factions", models.ManyToManyField(blank=True, to="noveller.faction")),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="plot",
            name="events_of_plot",
            field=models.ManyToManyField(blank=True, to="noveller.plotevent"),
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
                (
                    "character_versions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="locations_in_character_version",
                        to="noveller.characterversion",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="litstyleguide",
            name="perspective",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="noveller.perspective"
            ),
        ),
        migrations.AddField(
            model_name="litstyleguide",
            name="symbolism",
            field=models.ManyToManyField(blank=True, to="noveller.literarysymbolism"),
        ),
        migrations.AddField(
            model_name="litstyleguide",
            name="tone",
            field=models.ManyToManyField(blank=True, to="noveller.literarytone"),
        ),
        migrations.AddField(
            model_name="litstyleguide",
            name="traits",
            field=models.ManyToManyField(
                blank=True,
                related_name="litstyleguide_traits",
                to="noveller.literarytraits",
            ),
        ),
        migrations.AddField(
            model_name="literaryinspirationperson",
            name="sources",
            field=models.ManyToManyField(
                blank=True, to="noveller.literaryinspirationsource"
            ),
        ),
        migrations.CreateModel(
            name="InternalConflict",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("rel", models.CharField(max_length=200)),
                (
                    "character_version",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="internal_conflict_character_version",
                        to="noveller.characterversion",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("elaboration", models.TextField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="books_genres",
                        to="noveller.book",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="characterversion",
            name="drives",
            field=models.ManyToManyField(blank=True, to="noveller.drive"),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="fears",
            field=models.ManyToManyField(blank=True, to="noveller.fear"),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="for_character",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="noveller.character",
            ),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="internal_conflicts",
            field=models.ManyToManyField(blank=True, to="noveller.internalconflict"),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="lit_style_guides",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="noveller.litstyleguide",
            ),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="locations",
            field=models.ManyToManyField(blank=True, to="noveller.location"),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="often_perceived_as",
            field=models.ManyToManyField(
                blank=True,
                related_name="often_perceived_as",
                to="noveller.charactertrait",
            ),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="other_aspects",
            field=models.ManyToManyField(
                blank=True, related_name="other_aspects", to="noveller.charactertrait"
            ),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="relationship_for",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="noveller.characterrelationship",
            ),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="relationship_with",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="noveller.characterrelationship",
            ),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="setting_based_appearance_modifier_options",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="noveller.appearancemodifiers",
            ),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="strengths",
            field=models.ManyToManyField(
                blank=True, related_name="strengths", to="noveller.charactertrait"
            ),
        ),
        migrations.AddField(
            model_name="characterversion",
            name="weaknesses",
            field=models.ManyToManyField(
                blank=True, related_name="weaknesses", to="noveller.charactertrait"
            ),
        ),
        migrations.AddField(
            model_name="characterrelationship",
            name="character_version",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="character_versions",
                to="noveller.characterversion",
            ),
        ),
        migrations.AddField(
            model_name="characterrelationship",
            name="relationship_from",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="has_relationship",
                to="noveller.characterversion",
            ),
        ),
        migrations.AddField(
            model_name="characterrelationship",
            name="relationship_to",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="character_relationship",
                to="noveller.characterversion",
            ),
        ),
        migrations.CreateModel(
            name="CharacterRelatedSettingTopic",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("rights", models.TextField(blank=True, null=True)),
                ("attitudes", models.TextField(blank=True, null=True)),
                ("leisure", models.TextField(blank=True, null=True)),
                ("food", models.TextField(blank=True, null=True)),
                ("work", models.TextField(blank=True, null=True)),
                ("social_life", models.TextField(blank=True, null=True)),
                (
                    "appearance_modifiers",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="noveller.appearancemodifiers",
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="noveller.characterversion",
                    ),
                ),
                (
                    "setting",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="noveller.setting",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="character",
            name="representative_of",
            field=models.ManyToManyField(blank=True, to="noveller.theme"),
        ),
        migrations.AddField(
            model_name="character",
            name="versions",
            field=models.ManyToManyField(
                blank=True, related_name="+", to="noveller.characterversion"
            ),
        ),
        migrations.CreateModel(
            name="ChapterPartSummaryItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content", models.TextField(blank=True)),
                ("order_in_part", models.IntegerField(blank=True, default=0)),
                (
                    "for_chapter_part",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="noveller.chapterpartsummary",
                    ),
                ),
            ],
            options={
                "ordering": [
                    "for_chapter_part__for_chapter_part__chapter__book",
                    "for_chapter_part__for_chapter_part__chapter__chapter_num",
                    "for_chapter_part__for_chapter_part__part_num",
                    "order_in_part",
                ],
            },
        ),
        migrations.AddField(
            model_name="chapterpartsummary",
            name="pacing",
            field=models.ManyToManyField(blank=True, to="noveller.pacing"),
        ),
        migrations.AddField(
            model_name="chapterpartsummary",
            name="summary_items",
            field=models.ManyToManyField(
                related_name="chapter_part_summary_items",
                to="noveller.chapterpartsummaryitem",
            ),
        ),
        migrations.AddField(
            model_name="chapterpartsummary",
            name="themes",
            field=models.ManyToManyField(blank=True, to="noveller.theme"),
        ),
        migrations.AddField(
            model_name="chapterpart",
            name="chapter_part_summary",
            field=models.ManyToManyField(blank=True, to="noveller.chapterpartsummary"),
        ),
        migrations.AddField(
            model_name="chapterpart",
            name="characters",
            field=models.ManyToManyField(blank=True, to="noveller.characterversion"),
        ),
        migrations.AddField(
            model_name="chapterpart",
            name="factions",
            field=models.ManyToManyField(blank=True, to="noveller.faction"),
        ),
        migrations.AddField(
            model_name="chapterpart",
            name="for_chapter",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="chapter_parts",
                to="noveller.chapter",
            ),
        ),
        migrations.AddField(
            model_name="chapterpart",
            name="location",
            field=models.ManyToManyField(blank=True, to="noveller.location"),
        ),
        migrations.AddField(
            model_name="chapterpart",
            name="teller",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="noveller.storyteller",
            ),
        ),
        migrations.AddField(
            model_name="chapterpart",
            name="themes",
            field=models.ManyToManyField(blank=True, to="noveller.theme"),
        ),
        migrations.AddField(
            model_name="chapter",
            name="chapter_file",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="noveller.file",
            ),
        ),
        migrations.AddField(
            model_name="chapter",
            name="parts_for_chapter",
            field=models.ManyToManyField(
                blank=True, related_name="chapters", to="noveller.chapterpart"
            ),
        ),
        migrations.AddField(
            model_name="book",
            name="chapters",
            field=models.ManyToManyField(
                blank=True, related_name="books_chapters", to="noveller.chapter"
            ),
        ),
        migrations.AddField(
            model_name="book",
            name="characters",
            field=models.ManyToManyField(
                blank=True,
                related_name="characters_book_characters",
                to="noveller.character",
            ),
        ),
        migrations.AddField(
            model_name="book",
            name="genre",
            field=models.ManyToManyField(
                blank=True, related_name="book_genres", to="noveller.genre"
            ),
        ),
        migrations.AddField(
            model_name="book",
            name="plot",
            field=models.ManyToManyField(
                blank=True, related_name="books_events", to="noveller.plotevent"
            ),
        ),
        migrations.AddField(
            model_name="book",
            name="settings",
            field=models.ManyToManyField(
                blank=True, related_name="book_settings", to="noveller.setting"
            ),
        ),
        migrations.AddField(
            model_name="book",
            name="target_audience",
            field=models.ManyToManyField(
                blank=True, related_name="book_audiences", to="noveller.targetaudience"
            ),
        ),
        migrations.AddField(
            model_name="book",
            name="themes",
            field=models.ManyToManyField(
                blank=True, related_name="book_themes", to="noveller.theme"
            ),
        ),
        migrations.AddField(
            model_name="bgresearch",
            name="deeper_bg_research_topic",
            field=models.ManyToManyField(
                blank=True, to="noveller.deeperbgresearchtopic"
            ),
        ),
        migrations.AddField(
            model_name="appearancemodifiers",
            name="character_version",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="noveller.characterversion",
            ),
        ),
        migrations.AddField(
            model_name="appearance",
            name="character_version",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="appearance_for_character_version",
                to="noveller.characterversion",
            ),
        ),
        migrations.CreateModel(
            name="SubPlotEvent",
            fields=[
                (
                    "plotevent_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="noveller.plotevent",
                    ),
                ),
                (
                    "subplot",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subplots_events",
                        to="noveller.subplot",
                    ),
                ),
            ],
            options={
                "ordering": ["order_in_story_events"],
            },
            bases=("noveller.plotevent",),
        ),
        migrations.AddField(
            model_name="subplot",
            name="events_of_subplot",
            field=models.ManyToManyField(
                blank=True, related_name="subplots_events", to="noveller.subplotevent"
            ),
        ),
        migrations.AddField(
            model_name="subplot",
            name="sub_plot_of",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plots_subplot",
                to="noveller.plot",
            ),
        ),
    ]
