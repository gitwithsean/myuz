# Generated by Django 4.2 on 2023-05-11 02:03

from django.db import migrations, models
import django.db.models.deletion
import noveller.noveller_engines
import phusis.agent_engines
import phusis.agent_memory
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('phusis', '0002_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('noveller', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BackgroundEvent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('date_from', models.DateField(blank=True, null=True)),
                ('date_to', models.DateField(blank=True, null=True)),
                ('order_in_story_events', models.IntegerField(blank=True, null=True)),
                ('order_in_narrative_telling', models.IntegerField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BackgroundResearch',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('research', models.TextField(blank=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(default='', max_length=500, unique=True)),
                ('project_type', models.CharField(default='Phusis Project', max_length=200)),
                ('project_user_input', models.TextField(blank=True, default='')),
                ('project_workspace', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('project_embedding', models.TextField(blank=True)),
                ('from_app', models.CharField(default='noveller', max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('agent_assignments_for_project', models.ManyToManyField(blank=True, default=list, related_name='projects_for_agent_assignment', to='phusis.agentassignment')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_memory.ProjectMemory),
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('chapter_num', models.IntegerField(null=True)),
                ('chapter_goals', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['chapter_num'],
            },
        ),
        migrations.CreateModel(
            name='ChapterPart',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('part_num', models.IntegerField(null=True)),
                ('part_goals', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['for_chapter__chapter_num', 'part_num'],
            },
        ),
        migrations.CreateModel(
            name='ChapterPartSummary',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('chapter_part_summary', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('for_chapter_part', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.chapterpart')),
            ],
            options={
                'ordering': ['for_chapter_part__for_chapter__chapter_num', 'for_chapter_part__part_num'],
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('age_at_start', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=200, null=True)),
                ('sex', models.CharField(blank=True, max_length=200, null=True)),
                ('sexuality', models.CharField(blank=True, max_length=200, null=True)),
                ('origin', models.TextField(blank=True, null=True)),
                ('permanent_characteristics', models.TextField(blank=True, null=True)),
                ('character_arc', models.TextField(blank=True, null=True)),
                ('books', models.ManyToManyField(to='noveller.book')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterAppearance',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('distinguishing_features', models.TextField(null=True)),
                ('eyes', models.CharField(max_length=200, null=True)),
                ('hair', models.CharField(max_length=200, null=True)),
                ('face', models.CharField(max_length=200, null=True)),
                ('build', models.CharField(blank=True, max_length=200, null=True)),
                ('movement', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'ordering': ['character_version__for_character__name', 'character_version__version_num'],
            },
        ),
        migrations.CreateModel(
            name='CharacterAppearanceModifiers',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('clothing', models.TextField(blank=True, null=True)),
                ('hair_head_options', models.TextField(blank=True, null=True)),
                ('perfume', models.CharField(blank=True, max_length=200, null=True)),
                ('makeup', models.CharField(blank=True, max_length=200, null=True)),
                ('shaving', models.CharField(blank=True, max_length=200, null=True)),
                ('hygiene', models.CharField(blank=True, max_length=200, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterBelief',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterDrive',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterFear',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterInternalConflict',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterRelationship',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('age_started', models.IntegerField(null=True)),
                ('relationship_descriptors', models.TextField(null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['relationship_from__for_character__name', 'relationship_to__for_character__name'],
            },
        ),
        migrations.CreateModel(
            name='CharacterTrait',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterVersion',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('version_num', models.IntegerField(null=True)),
                ('age_at_start', models.IntegerField(blank=True, null=True)),
                ('age_at_end', models.IntegerField(blank=True, null=True)),
                ('preferred_weapon', models.CharField(blank=True, max_length=200, null=True)),
                ('appearance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.characterappearance')),
                ('beliefs', models.ManyToManyField(blank=True, to='noveller.characterbelief')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('drives', models.ManyToManyField(blank=True, to='noveller.characterdrive')),
                ('fears', models.ManyToManyField(blank=True, to='noveller.characterfear')),
                ('for_character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.character')),
                ('internal_conflicts', models.ManyToManyField(blank=True, to='noveller.characterinternalconflict')),
            ],
            options={
                'ordering': ['for_character__name'],
            },
        ),
        migrations.CreateModel(
            name='Faction',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('members', models.ManyToManyField(blank=True, to='noveller.characterversion')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LiteraryImagery',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LiteraryInspiration',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LiteraryStyleGuide',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('style_guide', models.TextField(blank=True, null=True)),
                ('compressed_sg', models.TextField(blank=True, null=True)),
                ('writing_samples', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrchestrationAgent',
            fields=[
                ('orchestrationagent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='phusis.orchestrationagent')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=('phusis.orchestrationagent',),
        ),
        migrations.CreateModel(
            name='Plot',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('plot_beginning', models.TextField(blank=True, null=True)),
                ('plot_middle', models.TextField(blank=True, null=True)),
                ('plot_end', models.TextField(blank=True, null=True)),
                ('is_sub_plot', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('plot_for_book', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='books_plots', to='noveller.book')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WritingAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, noveller.noveller_engines.WritingAgentEngine, phusis.agent_engines.AbstractEngine),
        ),
        migrations.CreateModel(
            name='WorldBuildingAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_engines.AbstractEngine),
        ),
        migrations.CreateModel(
            name='ThemeExploringAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_engines.AbstractEngine),
        ),
        migrations.CreateModel(
            name='TargetAudience',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StructuralAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_engines.AbstractEngine),
        ),
        migrations.CreateModel(
            name='StoryTeller',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('character_version', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='noveller.characterversion')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('lit_style_guide', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='noveller.literarystyleguide')),
            ],
            options={
                'ordering': ['character_version__for_character__name'],
            },
        ),
        migrations.CreateModel(
            name='StoryPacing',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('general_setting', models.TextField(blank=True)),
                ('background_events', models.ManyToManyField(blank=True, to='noveller.backgroundevent')),
                ('background_research', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.backgroundresearch')),
                ('books', models.ManyToManyField(blank=True, to='noveller.book')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('factions', models.ManyToManyField(blank=True, to='noveller.faction')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SceneAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_engines.AbstractEngine),
        ),
        migrations.CreateModel(
            name='Scene',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('date_from', models.DateField(blank=True, null=True)),
                ('date_to', models.DateField(blank=True, null=True)),
                ('order_in_story_events', models.IntegerField(blank=True, null=True)),
                ('order_in_narrative_telling', models.IntegerField(blank=True, null=True)),
                ('scene_summary', models.TextField(blank=True, null=True)),
                ('characters_present', models.ManyToManyField(blank=True, to='noveller.characterversion')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('for_plot', models.ManyToManyField(related_name='plots_scenes', to='noveller.plot')),
                ('foreshadowing', models.ManyToManyField(blank=True, to='noveller.scene')),
                ('pacing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.storypacing')),
                ('scene_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.location')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_engines.AbstractEngine),
        ),
        migrations.CreateModel(
            name='QualityEvaluationAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_engines.AbstractEngine),
        ),
        migrations.CreateModel(
            name='PoeticsAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_engines.AbstractEngine),
        ),
        migrations.AddField(
            model_name='plot',
            name='scenes_of_plot',
            field=models.ManyToManyField(blank=True, to='noveller.scene'),
        ),
        migrations.CreateModel(
            name='NarrativePerspective',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LiteraryTrait',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LiteraryTone',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LiteraryTheme',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LiterarySymbolism',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='literarystyleguide',
            name='avoid',
            field=models.ManyToManyField(blank=True, related_name='litstyleguide_avoid', to='noveller.literarytrait'),
        ),
        migrations.AddField(
            model_name='literarystyleguide',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='literarystyleguide',
            name='imagery',
            field=models.ManyToManyField(blank=True, to='noveller.literaryimagery'),
        ),
        migrations.AddField(
            model_name='literarystyleguide',
            name='inspirations',
            field=models.ManyToManyField(blank=True, to='noveller.literaryinspiration'),
        ),
        migrations.AddField(
            model_name='literarystyleguide',
            name='perspective',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='noveller.narrativeperspective'),
        ),
        migrations.AddField(
            model_name='literarystyleguide',
            name='symbolism',
            field=models.ManyToManyField(blank=True, to='noveller.literarysymbolism'),
        ),
        migrations.AddField(
            model_name='literarystyleguide',
            name='tone',
            field=models.ManyToManyField(blank=True, to='noveller.literarytone'),
        ),
        migrations.AddField(
            model_name='literarystyleguide',
            name='traits',
            field=models.ManyToManyField(blank=True, related_name='litstyleguide_traits', to='noveller.literarytrait'),
        ),
        migrations.CreateModel(
            name='LiteraryMood',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InterdisciplinaryAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_engines.AbstractEngine),
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('file_location', models.CharField(max_length=255, null=True)),
                ('file_content', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeeperBackgroundResearchTopic',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConflictAndResolutionAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_engines.AbstractEngine),
        ),
        migrations.AddField(
            model_name='characterversion',
            name='lit_style_guide',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.literarystyleguide'),
        ),
        migrations.AddField(
            model_name='characterversion',
            name='locations',
            field=models.ManyToManyField(blank=True, to='noveller.location'),
        ),
        migrations.AddField(
            model_name='characterversion',
            name='often_perceived_as',
            field=models.ManyToManyField(blank=True, related_name='often_perceived_as', to='noveller.charactertrait'),
        ),
        migrations.AddField(
            model_name='characterversion',
            name='other_aspects',
            field=models.ManyToManyField(blank=True, related_name='other_aspects', to='noveller.charactertrait'),
        ),
        migrations.AddField(
            model_name='characterversion',
            name='relationships',
            field=models.ManyToManyField(blank=True, to='noveller.characterrelationship'),
        ),
        migrations.AddField(
            model_name='characterversion',
            name='setting_based_appearance_modifier_options',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.characterappearancemodifiers'),
        ),
        migrations.AddField(
            model_name='characterversion',
            name='strengths',
            field=models.ManyToManyField(blank=True, related_name='strengths', to='noveller.charactertrait'),
        ),
        migrations.AddField(
            model_name='characterversion',
            name='weaknesses',
            field=models.ManyToManyField(blank=True, related_name='weaknesses', to='noveller.charactertrait'),
        ),
        migrations.AddField(
            model_name='characterrelationship',
            name='relationship_from',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='has_relationship', to='noveller.characterversion'),
        ),
        migrations.AddField(
            model_name='characterrelationship',
            name='relationship_to',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='character_relationship', to='noveller.characterversion'),
        ),
        migrations.CreateModel(
            name='CharacterRelatedSettingTopic',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('rights', models.TextField(blank=True, null=True)),
                ('attitudes', models.TextField(blank=True, null=True)),
                ('leisure', models.TextField(blank=True, null=True)),
                ('food', models.TextField(blank=True, null=True)),
                ('work', models.TextField(blank=True, null=True)),
                ('social_life', models.TextField(blank=True, null=True)),
                ('appearance_modifiers', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.characterappearancemodifiers')),
                ('character_in_setting', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.setting')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='characterappearance',
            name='character_version',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appearance_for_character_version', to='noveller.characterversion'),
        ),
        migrations.AddField(
            model_name='characterappearance',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.CreateModel(
            name='CharacterAgent',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('agent_system_prompt', models.TextField(blank=True)),
                ('steps_taken', models.JSONField(blank=True, default=list)),
                ('embedding_of_self', models.TextField(blank=True)),
                ('awake', models.BooleanField(default=False)),
                ('wake_up_message', models.TextField(blank=True, null=True)),
                ('compressed_wake_up_message', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(null=True)),
                ('origin_story', models.TextField(blank=True)),
                ('elaboration', models.TextField(blank=True)),
                ('llelle', models.TextField(blank=True)),
                ('malig', models.TextField(blank=True)),
                ('subtr', models.TextField(blank=True)),
                ('agent_created_traits', models.ManyToManyField(blank=True, to='phusis.agentcreatedtrait')),
                ('assignments_for_agent', models.ManyToManyField(blank=True, default=[], related_name='%(class)s_assigned_agents', to='phusis.agentassignment')),
                ('attitudes', models.ManyToManyField(blank=True, to='phusis.agentattitude')),
                ('beliefs', models.ManyToManyField(blank=True, to='phusis.agentbelief')),
                ('capabilities', models.ManyToManyField(blank=True, to='phusis.agentcapability')),
                ('chat_logs', models.ManyToManyField(blank=True, to='phusis.chatlog')),
                ('drives', models.ManyToManyField(blank=True, to='phusis.agentdrive')),
                ('favored_genre_combos', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenrecombo')),
                ('favored_genres', models.ManyToManyField(blank=True, to='phusis.agentfavoredgenre')),
                ('favored_themes', models.ManyToManyField(blank=True, to='phusis.agentfavoredtheme')),
                ('fears', models.ManyToManyField(blank=True, to='phusis.agentfear')),
                ('goals', models.ManyToManyField(blank=True, to='phusis.agentgoal')),
                ('impersonations', models.ManyToManyField(blank=True, to='phusis.agentimpersonation')),
                ('inspirational_sources', models.ManyToManyField(blank=True, to='phusis.agentinspirationalsource')),
                ('personality_traits', models.ManyToManyField(blank=True, to='phusis.agentpersonalitytrait')),
                ('possible_locations', models.ManyToManyField(blank=True, to='phusis.agentlocation')),
                ('qualifications', models.ManyToManyField(blank=True, to='phusis.agentqualification')),
                ('roles', models.ManyToManyField(blank=True, to='phusis.agentrole')),
                ('strengths', models.ManyToManyField(blank=True, to='phusis.agentstrength')),
                ('writing_style', models.ManyToManyField(blank=True, to='phusis.agentwritingstyle')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
            bases=(models.Model, phusis.agent_engines.AbstractEngine),
        ),
        migrations.AddField(
            model_name='character',
            name='representative_of',
            field=models.ManyToManyField(blank=True, to='noveller.literarytheme'),
        ),
        migrations.AddField(
            model_name='character',
            name='versions',
            field=models.ManyToManyField(blank=True, related_name='version_of_character', to='noveller.characterversion'),
        ),
        migrations.CreateModel(
            name='ChapterPartSummaryItem',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('elaboration', models.TextField(blank=True, null=True)),
                ('content', models.TextField(blank=True)),
                ('order_in_part', models.IntegerField(blank=True, default=0, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('for_chapter_part_summary', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.chapterpartsummary')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='chapterpartsummary',
            name='pacing',
            field=models.ManyToManyField(blank=True, to='noveller.storypacing'),
        ),
        migrations.AddField(
            model_name='chapterpartsummary',
            name='part_summary_items',
            field=models.ManyToManyField(blank=True, related_name='chapter_part_summary_items', to='noveller.chapterpartsummaryitem'),
        ),
        migrations.AddField(
            model_name='chapterpartsummary',
            name='themes',
            field=models.ManyToManyField(blank=True, to='noveller.literarytheme'),
        ),
        migrations.AddField(
            model_name='chapterpart',
            name='chapter_part_summary',
            field=models.ManyToManyField(blank=True, to='noveller.chapterpartsummary'),
        ),
        migrations.AddField(
            model_name='chapterpart',
            name='character_versions',
            field=models.ManyToManyField(blank=True, to='noveller.characterversion'),
        ),
        migrations.AddField(
            model_name='chapterpart',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='chapterpart',
            name='factions',
            field=models.ManyToManyField(blank=True, to='noveller.faction'),
        ),
        migrations.AddField(
            model_name='chapterpart',
            name='for_chapter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chapter_parts', to='noveller.chapter'),
        ),
        migrations.AddField(
            model_name='chapterpart',
            name='locations',
            field=models.ManyToManyField(blank=True, to='noveller.location'),
        ),
        migrations.AddField(
            model_name='chapterpart',
            name='storyteller_of_part',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.storyteller'),
        ),
        migrations.AddField(
            model_name='chapterpart',
            name='themes',
            field=models.ManyToManyField(blank=True, to='noveller.literarytheme'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='chapter_draft_file',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='noveller.file'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='chapter_in_book',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='book_characters', to='noveller.book'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='parts_for_chapter',
            field=models.ManyToManyField(blank=True, related_name='chapters', to='noveller.chapterpart'),
        ),
        migrations.AddField(
            model_name='book',
            name='chapters',
            field=models.ManyToManyField(blank=True, related_name='books_chapters', to='noveller.chapter'),
        ),
        migrations.AddField(
            model_name='book',
            name='characters',
            field=models.ManyToManyField(blank=True, related_name='characters_book_characters', to='noveller.character'),
        ),
        migrations.AddField(
            model_name='book',
            name='genres',
            field=models.ManyToManyField(blank=True, related_name='book_genres', to='noveller.genre'),
        ),
        migrations.AddField(
            model_name='book',
            name='goals_for_project',
            field=models.ManyToManyField(blank=True, default=[], to='phusis.phusisprojectgoal'),
        ),
        migrations.AddField(
            model_name='book',
            name='orchestrator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orchestrator_for_project', to='phusis.orchestrationagent'),
        ),
        migrations.AddField(
            model_name='book',
            name='plots',
            field=models.ManyToManyField(blank=True, related_name='books_plots', to='noveller.plot'),
        ),
        migrations.AddField(
            model_name='book',
            name='settings',
            field=models.ManyToManyField(blank=True, related_name='book_settings', to='noveller.setting'),
        ),
        migrations.AddField(
            model_name='book',
            name='target_audiences',
            field=models.ManyToManyField(blank=True, related_name='book_audiences', to='noveller.targetaudience'),
        ),
        migrations.AddField(
            model_name='book',
            name='themes',
            field=models.ManyToManyField(blank=True, related_name='book_themes', to='noveller.literarytheme'),
        ),
        migrations.AddField(
            model_name='backgroundresearch',
            name='deeper_research_topics',
            field=models.ManyToManyField(blank=True, to='noveller.deeperbackgroundresearchtopic'),
        ),
    ]
