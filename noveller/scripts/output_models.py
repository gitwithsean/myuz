# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2023-04-09T07:17:38+00:00
from __future__ import annotations
from typing import List, Optional, Union
from pydantic import BaseModel, Field

class Setting(BaseModel):
    general_setting: List[str]


class DeeperBackgroundResearchItem(BaseModel):
    uuid: str
    topic: str
    notes: List[str]


class Character(BaseModel):
    uuid: str
    name: str
    version: int
    description: str


class AppearanceModifiers(BaseModel):
    clothing: List[str]
    hair_head_options: List[str]
    perfume: str
    makeup: str
    shaving: str
    washing_schedule: str


class CharacterRelatedSettingInfoItem(BaseModel):
    uuid: str
    name: str
    character: Character
    rights: List[str]
    appearance_modifiers: AppearanceModifiers
    attitudes: List
    leisure: List[str]
    food: List[str]
    work: List[str]
    social_life: List[str]


class YearItem(BaseModel):
    from_: int = Field(..., alias='from')
    to: int


class BackgroundEvent(BaseModel):
    uuid: str
    event: str
    year: Union[float, YearItem]


class AgeRangeForThisVersion(BaseModel):
    age_range_start: int
    age_range_end: int


class Location(BaseModel):
    uuid: str
    name: str
    rel: str


class Appearance(BaseModel):
    distinguishing_features: List[str]
    eyes: str
    hair: str
    face: str
    build: str
    movement: str


class Relationship(BaseModel):
    uuid: str
    name: str
    age_it_started: int
    rel: List[str]


class ChangesFromPreviousVersion(BaseModel):
    preferred_weapon: str
    locations: Optional[List[Location]] = None
    strengths: Optional[List[str]] = None
    weaknesses: Optional[List[str]] = None
    relationships: Optional[List[Relationship]] = None


class CharacterVersion(BaseModel):
    version: int
    version_name: str
    age_range_for_this_version: AgeRangeForThisVersion
    locations: Optional[List[Location]] = None
    preferred_weapon: Optional[str] = None
    appearance: Optional[Appearance] = None
    strengths: Optional[List[str]] = None
    weaknesses: Optional[List[str]] = None
    other_aspects: Optional[List[str]] = None
    often_perceived_as: Optional[List[str]] = None
    drives: Optional[List[str]] = None
    fears: Optional[List[str]] = None
    beliefs: Optional[List] = None
    internal_conflicts: Optional[List] = None
    subter: Optional[str] = None
    relationships: Optional[List[Relationship]] = None
    changes_from_previous_version: Optional[ChangesFromPreviousVersion] = None


class MainCharacter(BaseModel):
    name: str
    uuid: str
    age_at_start: str
    gender: str
    origin: str
    representative_of: List[str]
    permanent_characteristics: List[str]
    character_versions: List[CharacterVersion]


class Relationship2(BaseModel):
    uuid: str
    name: str
    rel: List[str]


class SecondaryCharacter(BaseModel):
    name: str
    uuid: str
    age_at_start: str
    origin: str
    preferred_weapon: str
    strengths: List[str]
    weaknesses: List[str]
    representative_of: List
    other_aspects: List[str]
    often_perceived_as: List[str]
    drives: List[str]
    fears: List[str]
    relationships: List[Relationship2]


class Character1(BaseModel):
    uuid: str
    name: str


class Location2(BaseModel):
    uuid: str
    location: str


class YearItem1(BaseModel):
    from_: float = Field(..., alias='from')
    to: float


class StoryEvent(BaseModel):
    uuid: str
    themes: List[str]
    location_uuid: str
    character_uuids: List[str]
    description: str
    year: Optional[Union[Optional[float], YearItem1]] = None
    when: Optional[float] = None


class StyleGuide(BaseModel):
    uuid: str
    name: str


class Faction(BaseModel):
    uuid: str
    name: str


class Chapter(BaseModel):
    uuid: str
    chapter_num: int


class ChapterPart(BaseModel):
    uuid: str
    name: str


class Theme(BaseModel):
    uuid: str
    name: str


class ChapterPartSummaryItem(BaseModel):
    uuid: str
    section: str


class StoryEvent1(BaseModel):
    uuid: str


class Perspective(BaseModel):
    uuid: str
    description: Optional[str] = None
    name: Optional[str] = None


class Location3(BaseModel):
    uuid: str
    description: Optional[str] = None
    location: Optional[str] = None


class Part(BaseModel):
    uuid: str
    name: str
    perspective: Perspective
    location: Location3
    characters: List[Character1]
    themes: List[Theme]
    factions: List[Faction]
    chapter_part_summary: List[ChapterPartSummaryItem]


class OutlineItem(BaseModel):
    parts: List[Part]


class ChapterOutline(BaseModel):
    uuid: str
    story_event: StoryEvent1
    chapter: Chapter
    summary: str
    outline: Union[str, OutlineItem]


class Summary(BaseModel):
    market: str
    summary: str


class Character3(BaseModel):
    uuid: str
    name: str
    version: Optional[int] = None


class LitStyleGuide(BaseModel):
    name: str
    character: Character3
    uuid: str
    inspirations: List[str]
    traits: List[str]
    avoid: List[str]
    style_guide: List[str]
    compressed: List[str]
    writing_samples: List[str]


class Model(BaseModel):
    setting: Setting
    deeper_background_research: List[DeeperBackgroundResearchItem]
    character_related_setting_info: List[CharacterRelatedSettingInfoItem]
    background_events: List[BackgroundEvent]
    main_characters: List[MainCharacter]
    main_characters_relationship: str
    secondary_characters: List[SecondaryCharacter]
    characters: List[Character1]
    locations: List[Location2]
    story_events: List[StoryEvent]
    style_guides: List[StyleGuide]
    factions: List[Faction]
    chapters: List[Chapter]
    chapter_parts: List[ChapterPart]
    themes: List[Theme]
    chapter_part_summary: List[ChapterPartSummaryItem]
    chapter_outlines: List[ChapterOutline]
    story_rules: List[str]
    book_name: str
    author: str
    genres: List[str]
    inspirations: List[str]
    back_of_book_blurb: str
    summaries: List[Summary]
    lit_style_guides: List[LitStyleGuide]
